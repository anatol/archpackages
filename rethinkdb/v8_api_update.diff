commit 762aa95bd38d41450f93aaef14c6b7816fea94ff
Author: Anatol Pomozov <anatol.pomozov@gmail.com>
Date:   Thu Oct 3 21:41:37 2013 -0700

    Migrate to v8 new scope api
    
    3.20-ish V8 release inroduced EscapableHandleScope instead of HandleScope
    
    This is a followup for af5fca97ae it seems V8 refactoring added more API change and we should take care of it

diff --git a/src/extproc/js_job.cc b/src/extproc/js_job.cc
index 60ac9d2..5f36d7f 100644
--- a/src/extproc/js_job.cc
+++ b/src/extproc/js_job.cc
@@ -65,10 +65,11 @@ public:
     v8::Persistent<v8::Context> context;
 #else
     js_context_t() :
+        local_scope(v8::Isolate::GetCurrent()),
         context(v8::Context::New(v8::Isolate::GetCurrent())),
         scope(context) { }
 
-    v8::HandleScope local_scope;
+    v8::EscapableHandleScope local_scope;
     v8::Local<v8::Context> context;
 #endif
     v8::Context::Scope scope;
@@ -218,7 +219,11 @@ js_result_t js_env_t::eval(const std::string &source) {
     js_result_t result("");
     std::string *errmsg = boost::get<std::string>(&result);
 
+#ifdef V8_PRE_3_19
     v8::HandleScope handle_scope;
+#else
+    v8::EscapableHandleScope handle_scope(v8::Isolate::GetCurrent());
+#endif
 
     // TODO: use an "external resource" to avoid copy?
     v8::Handle<v8::String> src = v8::String::New(source.data(), source.size());
@@ -289,7 +294,11 @@ v8::Handle<v8::Value> run_js_func(v8::Handle<v8::Function> fn,
                                   const std::vector<counted_t<const ql::datum_t> > &args,
                                   std::string *errmsg) {
     v8::TryCatch try_catch;
+#ifdef V8_PRE_3_19
     v8::HandleScope scope;
+#else
+    v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
+#endif
 
     // Construct receiver object.
     v8::Handle<v8::Object> obj = v8::Object::New();
@@ -319,7 +328,11 @@ js_result_t js_env_t::call(js_id_t id,
     const boost::shared_ptr<v8::Persistent<v8::Value> > found_value = find_value(id);
     guarantee(!found_value->IsEmpty());
 
+#ifdef V8_PRE_3_19
     v8::HandleScope handle_scope;
+#else
+    v8::EscapableHandleScope handle_scope(v8::Isolate::GetCurrent());
+#endif
 
     // Construct local handle from persistent handle
 
@@ -366,7 +379,11 @@ counted_t<const ql::datum_t> js_make_datum(const v8::Handle<v8::Value> &value,
     --recursion_limit;
 
     // TODO: should we handle BooleanObject, NumberObject, StringObject?
+#ifdef V8_PRE_3_19
     v8::HandleScope handle_scope;
+#else
+    v8::EscapableHandleScope handle_scope(v8::Isolate::GetCurrent());
+#endif
 
     if (value->IsString()) {
         v8::Handle<v8::String> string = value->ToString();
@@ -463,7 +480,12 @@ counted_t<const ql::datum_t> js_to_datum(const v8::Handle<v8::Value> &value, std
     guarantee(!value.IsEmpty());
     guarantee(errmsg != NULL);
 
+#ifdef V8_PRE_3_19
     v8::HandleScope handle_scope;
+#else
+    v8::EscapableHandleScope handle_scope(v8::Isolate::GetCurrent());
+#endif
+
     errmsg->assign("Unknown error when converting to ql::datum_t.");
 
     return js_make_datum(value, TO_JSON_RECURSION_LIMIT, errmsg);
@@ -489,7 +511,11 @@ v8::Handle<v8::Value> js_from_datum(const counted_t<const ql::datum_t> &datum) {
         const std::vector<counted_t<const ql::datum_t> > &source_array = datum->as_array();
 
         for (size_t i = 0; i < source_array.size(); ++i) {
+#ifdef V8_PRE_3_19
             v8::HandleScope scope;
+#else
+            v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
+#endif
             v8::Handle<v8::Value> val = js_from_datum(source_array[i]);
             guarantee(!val.IsEmpty());
             array->Set(i, val);
@@ -502,7 +528,11 @@ v8::Handle<v8::Value> js_from_datum(const counted_t<const ql::datum_t> &datum) {
         const std::map<std::string, counted_t<const ql::datum_t> > &source_map = datum->as_object();
 
         for (auto it = source_map.begin(); it != source_map.end(); ++it) {
+#ifdef V8_PRE_3_19
             v8::HandleScope scope;
+#else
+            v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
+#endif
             v8::Handle<v8::Value> key = v8::String::New(it->first.c_str());
             v8::Handle<v8::Value> val = js_from_datum(it->second);
             guarantee(!key.IsEmpty() && !val.IsEmpty());
